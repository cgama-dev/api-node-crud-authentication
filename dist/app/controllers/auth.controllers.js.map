{"version":3,"sources":["../../../src/app/controllers/auth.controllers.js"],"names":["AuthController","app","util","Auth","query","req","res","User","find","users","status","send","error","create","email","body","findOne","user","password","undefined","token","generateToken","login","select","bcrypt","compare","errro","forgot_password","crypto","randomBytes","toString","now","Date","setHours","getHours","findOneAndUpdate","_id","id","passwordResetToken","passwordResetExpires","mailer","sendMail","to","from","template","context","err","reset_password","save"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AAEA;;;;AAEA;;;;AAEA;;;;AAEA;;;;;;AAEA,IAAMA,iBAAiB,SAAjBA,cAAiB,CAACC,GAAD,EAAS;;AAE5B,QAAMC,OAAO,qBAAb;;AAEA,QAAMC,OAAO;AACTC;AAAA,gGAAO,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAEqBC,eAAKC,IAAL,EAFrB;;AAAA;AAEOC,qCAFP;;AAAA,oCAIMA,KAJN;AAAA;AAAA;AAAA;;AAAA,iEAKYH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,2BAAT,EAArB,CALZ;;AAAA;;AAQCN,oCAAIK,IAAJ,CAASF,KAAT;;AARD;AAAA;;AAAA;AAAA;AAAA;AAAA,iEAWQH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,yBAAT,EAArB,CAXR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;;AAAA;AAAA;AAAA;;AAAA;AAAA,WADS;AAgBTC;AAAA,iGAAQ,kBAAOR,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACIQ,qCADJ,GACcT,IAAIU,IADlB,CACID,KADJ;AAAA;AAAA;AAAA,uCAIUP,eAAKS,OAAL,CAAa,EAAEF,YAAF,EAAb,CAJV;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kEAKWR,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,2CAAO;AADiB,iCAArB,CALX;;AAAA;AAAA;AAAA,uCAUmBL,eAAKM,MAAL,CAAYR,IAAIU,IAAhB,CAVnB;;AAAA;AAUME,oCAVN;;;AAYAA,qCAAKC,QAAL,GAAgBC,SAAhB;;AAEMC,qCAdN,GAcclB,KAAKmB,aAAL,CAAmBJ,IAAnB,CAdd;AAAA,kEAgBOX,IAAIK,IAAJ,CAAS,EAAEM,UAAF,EAAQG,YAAR,EAAT,CAhBP;;AAAA;AAAA;AAAA;AAAA,kEAmBOd,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,2CAAO;AADiB,iCAArB,CAnBP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAR;;AAAA;AAAA;AAAA;;AAAA;AAAA,WAhBS;AAwCTU;AAAA,iGAAO,kBAAOjB,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4CACyBD,IAAIU,IAD7B,EACKD,KADL,aACKA,KADL,EACYI,QADZ,aACYA,QADZ;AAAA;AAAA,uCAGgBX,eAAKS,OAAL,CAAa,EAAEF,YAAF,EAAb,EAAwBS,MAAxB,CAA+B,WAA/B,CAHhB;;AAAA;AAGGN,oCAHH;;AAAA,oCAKEA,IALF;AAAA;AAAA;AAAA;;AAAA,kEAMQX,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,wBAAT,EAArB,CANR;;AAAA;AAAA;AAAA,uCASSY,mBAAOC,OAAP,CAAeP,QAAf,EAAyBD,KAAKC,QAA9B,CATT;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kEAUQZ,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEe,OAAO,qCAAT,EAArB,CAVR;;AAAA;;AAaHT,qCAAKC,QAAL,GAAgBC,SAAhB;;AAEMC,qCAfH,GAeWlB,KAAKmB,aAAL,CAAmBJ,IAAnB,CAfX;;;AAiBHX,oCAAIK,IAAJ,CAAS,EAAEM,UAAF,EAAQG,YAAR,EAAT;;AAjBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;;AAAA;AAAA;AAAA;;AAAA;AAAA,WAxCS;AA4DTO;AAAA,iGAAiB,kBAAOtB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEDQ,qCAFC,GAEST,IAAIU,IAFb,CAEDD,KAFC;AAAA;AAAA,uCAIUP,eAAKS,OAAL,CAAa,EAAEF,YAAF,EAAb,CAJV;;AAAA;AAIHG,oCAJG;;AAAA,oCAMJA,IANI;AAAA;AAAA;AAAA;;AAAA,kEAOEX,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,wBAAT,EAArB,CAPF;;AAAA;AASHQ,qCATG,GASKQ,iBAAOC,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC,CATL;AAWHC,mCAXG,GAWG,IAAIC,IAAJ,EAXH;;AAYTD,oCAAIE,QAAJ,CAAaF,IAAIG,QAAJ,KAAiB,CAA9B;;AAZS;AAAA,uCAcH3B,eAAK4B,gBAAL,CAAsB,EAAEC,KAAKnB,KAAKoB,EAAZ,EAAtB,EAAwC;AAC1C,4CAAQ;AACJC,4DAAoBlB,KADhB;AAEJmB,8DAAsBR;AAFlB;AADkC,iCAAxC,CAdG;;AAAA;;AAqBTS,+CAAOC,QAAP,CAAgB;AACZC,wCAAI5B,KADQ;AAEZ6B,0CAAM,uBAFM;AAGZC,8CAAU,uBAHE;AAIZC,6CAAS,EAAEzB,YAAF;AAJG,iCAAhB,EAKG,UAAC0B,GAAD,EAAS;AACR,wCAAIA,GAAJ,EACI,OAAOxC,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,sBAAT,EAArB,CAAP;;AAEJ,2CAAON,IAAIK,IAAJ,EAAP;AACH,iCAVD;;AArBS;AAAA;;AAAA;AAAA;AAAA;;AAkCTL,oCAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,gDAAT,EAArB;;AAlCS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAjB;;AAAA;AAAA;AAAA;;AAAA;AAAA,WA5DS;AAiGTmC;AAAA,iGAAgB,kBAAO1C,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,6CACuBD,IAAIU,IAD3B,EACJD,KADI,cACJA,KADI,EACGI,QADH,cACGA,QADH,EACaE,KADb,cACaA,KADb;AAAA;AAAA;AAAA,uCAIWb,eAAKS,OAAL,CAAa,EAAEF,YAAF,EAAb,EAAwBS,MAAxB,CAA+B,0CAA/B,CAJX;;AAAA;AAIFN,oCAJE;;AAAA,oCAMHA,IANG;AAAA;AAAA;AAAA;;AAAA,kEAOGX,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,wBAAT,EAArB,CAPH;;AAAA;AAAA,sCASJQ,UAAUH,KAAKqB,kBATX;AAAA;AAAA;AAAA;;AAAA,kEAUGhC,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,gBAAT,EAArB,CAVH;;AAAA;AAYFmB,mCAZE,GAYI,IAAIC,IAAJ,EAZJ;;AAAA,sCAcJD,MAAMd,KAAKsB,oBAdP;AAAA;AAAA;AAAA;;AAAA,kEAeGjC,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,gBAAT,EAArB,CAfH;;AAAA;;AAiBRK,qCAAKC,QAAL,GAAgBA,QAAhB;;AAjBQ;AAAA,uCAmBFD,KAAK+B,IAAL,EAnBE;;AAAA;AAAA,kEAqBD1C,IAAIK,IAAJ,EArBC;;AAAA;AAAA;AAAA;;AAwBRL,oCAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,sDAAT,EAArB;;AAxBQ;AA0BZN,oCAAIK,IAAJ,CAASN,IAAIU,IAAb;;AA1BY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAhB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAjGS,KAAb;;AA+HA,WAAOZ,IAAP;AACH,CApID;;kBAsIeH,c","file":"auth.controllers.js","sourcesContent":["import User from \"../models/user.models\"\n\nimport bcrypt from 'bcryptjs'\n\nimport Util from './../util'\n\nimport crypto from 'crypto'\n\nimport mailer from './../modules/mail'\n\nconst AuthController = (app) => {\n\n    const util = Util()\n\n    const Auth = {\n        query: async (req, res) => {\n            try {\n                const users = await User.find()\n\n                if (!users) {\n                    return res.status(400).send({ error: 'Nenhum usuário encontrado' })\n                }\n\n                res.send(users)\n\n            } catch (err) {\n                return res.status(400).send({ error: 'Erro ao buscar usuários' })\n            }\n\n        },\n        create: async (req, res) => {\n            const { email } = req.body\n            try {\n\n                if (await User.findOne({ email })) {\n                    return res.status(400).send({\n                        error: 'Email do usuário já existe'\n                    })\n                }\n\n                const user = await User.create(req.body)\n\n                user.password = undefined\n\n                const token = util.generateToken(user)\n\n                return res.send({ user, token })\n\n            } catch (err) {\n                return res.status(400).send({\n                    error: 'Erro ao registrar usuário'\n                })\n            }\n        },\n        login: async (req, res) => {\n            const { email, password } = req.body\n\n            const user = await User.findOne({ email }).select('+password')\n\n            if (!user) {\n                return res.status(400).send({ error: 'Usuário não encontrado' })\n            }\n\n            if (! await bcrypt.compare(password, user.password)) {\n                return res.status(400).send({ errro: \"Sua senha de usuário está incorreta\" })\n            }\n\n            user.password = undefined\n\n            const token = util.generateToken(user)\n\n            res.send({ user, token })\n\n        },\n        forgot_password: async (req, res) => {\n            try {\n                const { email } = req.body\n\n                const user = await User.findOne({ email })\n\n                if (!user)\n                    return res.status(400).send({ error: 'Usuário não encontrado' })\n\n                const token = crypto.randomBytes(20).toString('hex')\n\n                const now = new Date()\n                now.setHours(now.getHours() + 1)\n\n                await User.findOneAndUpdate({ _id: user.id }, {\n                    '$set': {\n                        passwordResetToken: token,\n                        passwordResetExpires: now\n                    }\n                })\n                \n                mailer.sendMail({\n                    to: email,\n                    from: 'cleytongama@gmail.com',\n                    template: '/auth/forgot_password',\n                    context: { token }\n                }, (err) => {\n                    if (err)\n                        return res.status(400).send({ error: 'Erro ao enviar email' })\n\n                    return res.send()\n                })\n\n            } catch (err) {\n                res.status(400).send({ error: 'Error na recuperação de senha, tente novamente' })\n            }\n        },\n        reset_password: async (req, res) => {\n            const { email, password, token } = req.body\n\n            try {\n                const user = await User.findOne({ email }).select('+passwordResetToken passwordResetExpires')\n\n                if (!user)\n                    return res.status(400).send({ error: 'Usuário não encontrado' })\n\n                if (token !== user.passwordResetToken)\n                    return res.status(400).send({ error: 'Token invalido' })\n\n                const now = new Date()\n\n                if (now > user.passwordResetExpires)\n                    return res.status(400).send({ error: 'Token expirado' })\n\n                user.password = password\n\n                await user.save()\n\n                return res.send()\n\n            } catch (err) {\n                res.status(400).send({ error: 'Não foi possivel resetar o password, tente novamente' })\n            }\n            res.send(req.body)\n        }\n    }\n\n    return Auth\n}\n\nexport default AuthController"]}