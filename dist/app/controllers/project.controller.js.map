{"version":3,"sources":["../../../src/app/controllers/project.controller.js"],"names":["ProjectController","Controller","query","req","res","Project","find","populate","projects","send","status","error","get","projectId","params","findById","project","create","body","title","description","tasks","user","userId","Promise","all","map","task","projectTask","Task","_id","save","newTask","update","findByIdAndUpdate","new","remove","delete","findByIdAndRemove"],"mappings":"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","file":"project.controller.js","sourcesContent":["import Project from './../models/project.models'\nimport Task from '../models/task.models';\n\nconst ProjectController = () => {\n\n    const Controller = {\n        query: async (req, res) => {\n            try {\n                const projects = await Project.find().populate(['user', 'task'])\n\n                return res.send({ projects })\n\n            } catch (err) {\n\n                return res.status(400).send({ error: 'Erro ao listar projetos' })\n            }\n\n        },\n        get: async (req, res) => {\n            const projectId = req.params.projectId\n\n            try {\n                const project = await Project.findById(projectId).populate('user')\n\n                if (!project)\n                    return res.status(400).send({ error: 'Esse projeto nÃ£o existe na base de dados' })\n\n                return res.send({ project })\n\n            } catch (err) {\n                return res.status(400).send({ error: 'Erro ao buscar projeto' })\n            }\n\n        },\n        create: async (req, res) => {\n            try {\n\n                const { title, description, tasks } = req.body\n\n                const project = await Project.create({ title, description, user: req.userId })\n\n                await Promise.all(tasks.map(async task => {\n                    const projectTask = new Task({ ...task, project: project._id })\n\n                    const newTask = await projectTask.save()\n\n                    project.tasks = [...project.tasks, newTask]\n\n                }))\n\n                await project.save()\n\n                return res.send({ project })\n\n            } catch (err) {\n                return res.status(400).send({ error: ' Erro ao criar projeto' })\n            }\n        },\n        update: async (req, res) => {\n            const projectId = req.params.projectId\n            try {\n\n                const { title, description, tasks } = req.body\n\n                const project = await Project.findByIdAndUpdate({ _id: projectId }, {\n                    title,\n                    description\n                }, { new: true })\n\n                project.tasks = []\n\n                await Task.remove({ project: projectId })\n\n                await Promise.all(tasks.map(async task => {\n                    const projectTask = new Task({ ...task, project: project._id })\n\n                    const newTask = await projectTask.save()\n\n                    project.tasks = [...project.tasks, newTask]\n\n                }))\n\n                await project.save()\n\n                return res.send({ project })\n\n            } catch (err) {\n                return res.status(400).send({ error: ' Erro ao atualizar projeto' })\n            }\n        },\n        delete: async (req, res) => {\n            const projectId = req.params.projectId\n\n            try {\n\n                await Project.findByIdAndRemove(projectId)\n\n                return res.send()\n\n            } catch (err) {\n                return res.status(400).send({ error: 'Erro ao deletar projeto' })\n            }\n\n        }\n    }\n\n    return Controller\n}\n\nexport default ProjectController"]}