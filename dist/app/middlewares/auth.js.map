{"version":3,"sources":["../../../src/app/middlewares/auth.js"],"names":["AuthMiddleware","req","res","next","authHeader","headers","authorization","status","send","error","parts","split","length","scheme","token","test","jwt","verify","authConfig","secret","err","decoded","userId","id"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,iBAAiB,SAAjBA,cAAiB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;;AAGvC,MAAMC,aAAaH,IAAII,OAAJ,CAAYC,aAA/B;;AAEA,MAAI,CAACF,UAAL,EAAiB;AACf,WAAQF,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,wCAAT,EAArB,CAAR;AACD;;AAED,MAAMC,QAAQN,WAAWO,KAAX,CAAiB,GAAjB,CAAd;;AAEA,MAAI,CAACD,MAAME,MAAP,KAAkB,CAAtB,EAAyB;AACvB,WAAQV,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,aAAT,EAArB,CAAR;AACD;;AAbsC,4CAefC,KAfe;AAAA,MAehCG,MAfgC;AAAA,MAexBC,KAfwB;;AAiBvC,MAAI,CAAC,YAAYC,IAAZ,CAAiBF,MAAjB,CAAL,EAA+B;AAC5B,WAAOX,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,wBAAT,EAArB,CAAP;AACF;;AAEDO,yBAAIC,MAAJ,CAAWH,KAAX,EAAkBI,eAAWC,MAA7B,EAAqC,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACnD,QAAID,GAAJ,EAAS;AACP,aAAQlB,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,eAAT,EAArB,CAAR;AACD;;AAEDR,QAAIqB,MAAJ,GAAaD,QAAQE,EAArB;AACH,GAND;;AAQA,SAAOpB,MAAP;AAEH,CA/BD;;kBAiCeH,c","file":"auth.js","sourcesContent":["import jwt from 'jsonwebtoken'\nimport authConfig from '../../config/auth'\n\nconst AuthMiddleware = (req, res, next) => {\n\n\n    const authHeader = req.headers.authorization\n\n    if (!authHeader) {\n      return  res.status(401).send({ error: \"Usuário não possui token para acessar \" })\n    }\n\n    const parts = authHeader.split(\" \")\n\n    if (!parts.length === 2) {\n      return  res.status(401).send({ error: \"Token error\" })\n    }\n\n    const [scheme, token] = parts\n\n    if (!/^Bearer$/i.test(scheme)) {\n       return res.status(401).send({ error: 'Token invalid formater' })\n    }\n\n    jwt.verify(token, authConfig.secret, (err, decoded) => {\n        if (err) {\n          return  res.status(401).send({ error: 'Token invalid' })\n        }\n\n        req.userId = decoded.id\n    })\n\n    return next()\n\n}\n\nexport default AuthMiddleware"]}